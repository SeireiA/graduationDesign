{"version":3,"file":"index.js","sources":["components/mp-html/components/mp-html/style/index.js"],"sourcesContent":["/**\n * @fileoverview style 插件\n */\n// #ifndef APP-PLUS-NVUE\nimport Parser from './parser'\n// #endif\n\nfunction Style () {\n  this.styles = []\n}\n\n// #ifndef APP-PLUS-NVUE\nStyle.prototype.onParse = function (node, vm) {\n  // 获取样式\n  if (node.name === 'style' && node.children.length && node.children[0].type === 'text') {\n    this.styles = this.styles.concat(new Parser().parse(node.children[0].text))\n  } else if (node.name) {\n    // 匹配样式（对非文本标签）\n    // 存储不同优先级的样式 name < class < id < 后代\n    let matched = ['', '', '', '']\n    for (let i = 0, len = this.styles.length; i < len; i++) {\n      const item = this.styles[i]\n      let res = match(node, item.key || item.list[item.list.length - 1])\n      let j\n      if (res) {\n        // 后代选择器\n        if (!item.key) {\n          j = item.list.length - 2\n          for (let k = vm.stack.length; j >= 0 && k--;) {\n            // 子选择器\n            if (item.list[j] === '>') {\n              // 错误情况\n              if (j < 1 || j > item.list.length - 2) break\n              if (match(vm.stack[k], item.list[j - 1])) {\n                j -= 2\n              } else {\n                j++\n              }\n            } else if (match(vm.stack[k], item.list[j])) {\n              j--\n            }\n          }\n          res = 4\n        }\n        if (item.key || j < 0) {\n          // 添加伪类\n          if (item.pseudo && node.children) {\n            let text\n            item.style = item.style.replace(/content:([^;]+)/, (_, $1) => {\n              text = $1.replace(/['\"]/g, '')\n                // 处理 attr 函数\n                .replace(/attr\\((.+?)\\)/, (_, $1) => node.attrs[$1.trim()] || '')\n                // 编码 \\xxx\n                .replace(/\\\\(\\w{4})/, (_, $1) => String.fromCharCode(parseInt($1, 16)))\n              return ''\n            })\n            const pseudo = {\n              name: 'span',\n              attrs: {\n                style: item.style\n              },\n              children: [{\n                type: 'text',\n                text\n              }]\n            }\n            if (item.pseudo === 'before') {\n              node.children.unshift(pseudo)\n            } else {\n              node.children.push(pseudo)\n            }\n          } else {\n            matched[res - 1] += item.style + (item.style[item.style.length - 1] === ';' ? '' : ';')\n          }\n        }\n      }\n    }\n    matched = matched.join('')\n    if (matched.length > 2) {\n      node.attrs.style = matched + (node.attrs.style || '')\n    }\n  }\n}\n\n/**\n * @description 匹配样式\n * @param {object} node 要匹配的标签\n * @param {string|string[]} keys 选择器\n * @returns {number} 0：不匹配；1：name 匹配；2：class 匹配；3：id 匹配\n */\nfunction match (node, keys) {\n  function matchItem (key) {\n    if (key[0] === '#') {\n      // 匹配 id\n      if (node.attrs.id && node.attrs.id.trim() === key.substr(1)) return 3\n    } else if (key[0] === '.') {\n      // 匹配 class\n      key = key.substr(1)\n      const selectors = (node.attrs.class || '').split(' ')\n      for (let i = 0; i < selectors.length; i++) {\n        if (selectors[i].trim() === key) return 2\n      }\n    } else if (node.name === key) {\n      // 匹配 name\n      return 1\n    }\n    return 0\n  }\n\n  // 多选择器交集\n  if (keys instanceof Array) {\n    let res = 0\n    for (let j = 0; j < keys.length; j++) {\n      const tmp = matchItem(keys[j])\n      // 任意一个不匹配就失败\n      if (!tmp) return 0\n      // 优先级最大的一个作为最终优先级\n      if (tmp > res) {\n        res = tmp\n      }\n    }\n    return res\n  }\n\n  return matchItem(keys)\n}\n// #endif\n\nexport default Style\n"],"names":["Parser","_","$1"],"mappings":"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"}