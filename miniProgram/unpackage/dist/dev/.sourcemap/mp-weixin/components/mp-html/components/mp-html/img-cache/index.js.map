{"version":3,"file":"index.js","sources":["components/mp-html/components/mp-html/img-cache/index.js"],"sourcesContent":["const data = {\n  name: 'imgcache',\n  prefix: 'imgcache_'\n}\nfunction ImgCache (vm) {\n  this.vm = vm // 保存实例在其他周期使用\n  this.i = 0 // 用于标记第几张图\n  vm.imgCache = {\n    get list () {\n      return uni\n        .getStorageInfoSync()\n        .keys.filter((key) => key.startsWith(data.prefix))\n        .map((key) => key.split(data.prefix)[1])\n    },\n    get (url) {\n      return uni.getStorageSync(data.prefix + url)\n    },\n    delete (url) {\n      const path = uni.getStorageSync(data.prefix + url)\n      if (!path) return false\n      plus.io.resolveLocalFileSystemURL(path, (entry) => {\n        entry.remove()\n      })\n      uni.removeStorageSync(data.prefix + url)\n      return true\n    },\n    async add (url) {\n      const filename = await download(url)\n      if (filename) {\n        uni.setStorageSync(data.prefix + url, filename)\n        return 'file://' + plus.io.convertLocalFileSystemURL(filename)\n      }\n      return null\n    },\n    clear () {\n      uni\n        .getStorageInfoSync()\n        .keys.filter((key) => key.startsWith(data.prefix))\n        .forEach((key) => {\n          uni.removeStorageSync(key)\n        })\n\n      plus.io.resolveLocalFileSystemURL(`_doc/${data.name}/`, (entry) => {\n        entry.removeRecursively(\n          (entry) => {\n            console.log(`${data.name}缓存删除成功`, entry)\n          },\n          (e) => {\n            console.log(`${data.name}缓存删除失败`, e)\n          }\n        )\n      })\n    }\n  }\n}\n\n// #ifdef APP-PLUS\nImgCache.prototype.onParse = function (node, parser) {\n  // 启用本插件 && 解析图片标签 && 拥有src属性 && 是网络图片\n  if (\n    this.vm.ImgCache &&\n    node.name === 'img' &&\n    node.attrs.src &&\n    /^https?:\\/\\//.test(node.attrs.src)\n  ) {\n    const src = node.attrs.src\n    node.attrs.src = ''\n    node.attrs.i = this.vm.imgList.length + this.i++\n    parser.expose()\n\n    async function getUrl (path) {\n      if (await resolveFile(path)) return path\n      const filename = await download(src)\n      filename && uni.setStorageSync(data.prefix + src, filename)\n      return filename\n    }\n\n    uni.getStorage({\n      key: data.prefix + src,\n      success: async (res) => {\n        const path = await getUrl(res.data)\n        const url = path\n          ? 'file://' + plus.io.convertLocalFileSystemURL(path)\n          : src\n        node.attrs.src = url\n        this.vm.imgList[node.attrs.i] = path || src\n      },\n      fail: async () => {\n        const path = await getUrl()\n        const url = path\n          ? 'file://' + plus.io.convertLocalFileSystemURL(path)\n          : src\n        node.attrs.src = url\n        this.vm.imgList[node.attrs.i] = path || src\n      }\n    })\n  }\n}\n\nconst taskQueue = new Set()\n\nfunction download (url) {\n  return new Promise((resolve) => {\n    if (taskQueue.has(url)) return\n    taskQueue.add(url)\n    const suffix = /.+\\.(jpg|jpeg|png|bmp|gif|webp)/.exec(url)\n    const name = `${makeid(8)}_${Date.now()}${suffix ? '.' + suffix[1] : ''}`\n    const task = plus.downloader.createDownload(\n      url,\n      { filename: `_doc/${data.name}/${name}` },\n      (download, status) => {\n        taskQueue.delete(url)\n        resolve(status === 200 ? download.filename : null)\n      }\n    )\n    task.start()\n  })\n}\n\n// 判断文件存在\nfunction resolveFile (url) {\n  return new Promise((resolve) => {\n    plus.io.resolveLocalFileSystemURL(url, resolve, () => resolve(null))\n  })\n}\n\n// 生成uuid\nfunction makeid (length) {\n  let result = ''\n  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n  for (let i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * characters.length))\n  }\n  return result\n}\n// #endif\n\nexport default ImgCache\n"],"names":["uni","entry"],"mappings":";;AAAA,MAAM,OAAO;AAAA,EACX,MAAM;AAAA,EACN,QAAQ;AACV;AACA,SAAS,SAAU,IAAI;AACrB,OAAK,KAAK;AACV,OAAK,IAAI;AACT,KAAG,WAAW;AAAA,IACZ,IAAI,OAAQ;AACV,aAAOA,cAAG,MACP,mBAAoB,EACpB,KAAK,OAAO,CAAC,QAAQ,IAAI,WAAW,KAAK,MAAM,CAAC,EAChD,IAAI,CAAC,QAAQ,IAAI,MAAM,KAAK,MAAM,EAAE,CAAC,CAAC;AAAA,IAC1C;AAAA,IACD,IAAK,KAAK;AACR,aAAOA,cAAG,MAAC,eAAe,KAAK,SAAS,GAAG;AAAA,IAC5C;AAAA,IACD,OAAQ,KAAK;AACX,YAAM,OAAOA,cAAAA,MAAI,eAAe,KAAK,SAAS,GAAG;AACjD,UAAI,CAAC;AAAM,eAAO;AAClB,WAAK,GAAG,0BAA0B,MAAM,CAAC,UAAU;AACjD,cAAM,OAAQ;AAAA,MACtB,CAAO;AACDA,oBAAAA,MAAI,kBAAkB,KAAK,SAAS,GAAG;AACvC,aAAO;AAAA,IACR;AAAA,IACD,MAAM,IAAK,KAAK;AACd,YAAM,WAAW,MAAM,SAAS,GAAG;AACnC,UAAI,UAAU;AACZA,sBAAAA,MAAI,eAAe,KAAK,SAAS,KAAK,QAAQ;AAC9C,eAAO,YAAY,KAAK,GAAG,0BAA0B,QAAQ;AAAA,MAC9D;AACD,aAAO;AAAA,IACR;AAAA,IACD,QAAS;AACPA,oBAAG,MACA,mBAAoB,EACpB,KAAK,OAAO,CAAC,QAAQ,IAAI,WAAW,KAAK,MAAM,CAAC,EAChD,QAAQ,CAAC,QAAQ;AAChBA,sBAAG,MAAC,kBAAkB,GAAG;AAAA,MACnC,CAAS;AAEH,WAAK,GAAG,0BAA0B,QAAQ,KAAK,IAAI,KAAK,CAAC,UAAU;AACjE,cAAM;AAAA,UACJ,CAACC,WAAU;AACTD,gCAAY,MAAA,OAAA,kEAAA,GAAG,KAAK,IAAI,UAAUC,MAAK;AAAA,UACxC;AAAA,UACD,CAAC,MAAM;AACLD,gCAAA,MAAA,OAAA,kEAAY,GAAG,KAAK,IAAI,UAAU,CAAC;AAAA,UACpC;AAAA,QACF;AAAA,MACT,CAAO;AAAA,IACF;AAAA,EACF;AACH;;"}